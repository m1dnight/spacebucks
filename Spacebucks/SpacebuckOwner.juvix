module Spacebucks.SpacebuckOwner;

import Stdlib.Prelude open;
import Applib open;
import Anoma.Encode open;
import Stdlib.Debug.Trace open;

-- ### Module, imports ###

-- The logic function is called in every transaction that tries to either
-- consume or create a resource in Spacebucks.
--
-- So, given a Spacebuck, the logic function should verify that:
--
-- 1. If the resource is not being consumed, it can be creatd.
-- 2. If the resource is ephemeral, it can be created.
-- 3. The resource is not ephemeral, and is

-- if a value influences the kind, it should go in label
-- if it does not, it should go into value (kind of meta-data for a resource)
logicFunction (args : Logic.Args) : Bool :=
  trace "beginning"
    >-> trace "isConsumed"
    >-> trace (Logic.Args.isConsumed args)
    >-> trace (Resource.nonce (Logic.Args.self args))
    >-> trace (listMap Resource.nonce (Logic.Args.consumed args))
    >-> trace (listMap Resource.nonce (Logic.Args.created args))
    >-> trace (length (Logic.Args.created args))
    >-> trace (Logic.Args.appData args)
    >-> trace (Resource.ephemeral (Logic.Args.self args))
    >-> trace "ending"
    >-> let
          isConsumed := Logic.Args.isConsumed args;
          isEphemeral := Resource.ephemeral (Logic.Args.self args);
        in if
          | isEphemeral || isConsumed := true
          | else := trace isEphemeral >-> true;

-- a transaction to create should only be valid if the
-- creator of the object is the same as the originator
--
-- only the originator can create, so a logic function should
-- verify that the created resource has the same originator

mkSpacebuck
  (nonce : Nonce)
  (logic : Logic)
  (message : String)
  {ephemeral : Bool := false}
  : Resource :=
  Resource.mk@{
    logic := Encoded.encode logic;
    label := Label.fromNat (builtinAnomaEncode message);
    value := AnomaAtom.fromNat 0;
    quantity := 1;
    ephemeral;
    nonce := Nonce.toRaw nonce;
    nullifierKeyCommitment := AnomaAtom.fromNat 0;
    unusedRandSeed := 0;
  };

spacebuckTransaction
  {M : Type -> Type}
  {{Monad M}}
  -- additional information for type parameter M
  {{Tx M}}
  -- random number generator needs side effects / Monad
  (logic : Logic)
  (label : String)
  : M Transaction :=
  do {
    ctx <- getTxContext;
    nonce1 <- genRandomNonce;
    nonce2 <- genRandomNonce;
    let
      newResource := mkSpacebuck nonce1 logic label;
    in
    mkTransactionNoPublicData@{
      consumed :=
        [newResource@Resource{ephemeral := true; nonce := Nonce.toRaw nonce2}];
      created := [newResource];
    };
  };

ctx : TxContext :=
  TxContext.mk@{
    caller := Universal.identity;
    currentRoot := CommitmentRoot.fromNat 0;
  };

main (logic : Logic) : TransactionRequest :=
  TransactionRequest.build 0 ctx (spacebuckTransaction logic "Hello World!\n");
